package com.boozallen.aiops.mda.generator;

/*-
 * #%L
 * AIOps Foundation::AIOps MDA
 * %%
 * Copyright (C) 2021 Booz Allen
 * %%
 * This software package is licensed under the Booz Allen Public License. All Rights Reserved.
 * #L%
 */

import com.boozallen.aiops.mda.generator.common.AbstractGeneratorAissemble;
import com.boozallen.aiops.mda.generator.common.VelocityProperty;
import com.boozallen.aiops.mda.generator.util.PipelineUtils;
import com.boozallen.aiops.mda.generator.util.PythonGeneratorUtils;
import com.boozallen.aiops.mda.metamodel.element.Pipeline;
import com.boozallen.aiops.mda.metamodel.element.Step;
import com.boozallen.aiops.mda.metamodel.element.python.PythonPipeline;
import org.apache.velocity.VelocityContext;
import org.technologybrewery.fermenter.mda.generator.GenerationContext;
import org.technologybrewery.fermenter.mda.generator.GenerationException;

import java.io.File;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Base generator for generating capabilities associated with the inference step of
 * a specific pipeline that is indicated by the <i>targetedPipeline</i> property in the
 * fermenter-mda plugin configuration.  All files generated by subclasses of this
 * generator will be generated into "src/main"
 */
public abstract class BaseTargetedPipelineInferenceGenerator extends AbstractGeneratorAissemble {

    @Override
    public void generate(GenerationContext generationContext) {
        Pipeline pipeline = PipelineUtils.getTargetedPipeline(generationContext, metadataContext);
        PythonPipeline pythonTargetPipeline = new PythonPipeline(pipeline);

        String originalTemplateName = generationContext.getTemplateName();
        String pipelineImplementation = pipeline.getType().getImplementation();
        String pipelineSpecificTemplateName = replace("pipelineImplementation", originalTemplateName, pipelineImplementation);
        generationContext.setTemplateName(pipelineSpecificTemplateName);

        VelocityContext vc = getNewVelocityContext(generationContext);
        vc.put(VelocityProperty.PIPELINE, pythonTargetPipeline);

        List<Step> inferenceSteps = pythonTargetPipeline.getSteps().stream()
                .filter(step -> "inference".equals(step.getType()))
                .collect(Collectors.toList());
        List<? extends Step> decoratedInferenceSteps = decorateInferenceSteps(inferenceSteps);

        if (decoratedInferenceSteps.size() != 1) {
            throw new GenerationException(String.format("Currently the definition of only one inference step is supported - %s inference steps are defined in pipeline %s",
                    decoratedInferenceSteps.size(), pipeline.getName()));
        }

        vc.put(VelocityProperty.STEP, decoratedInferenceSteps.get(0));

        String baseOutputFile = generationContext.getOutputFile();
        String artifactIdSnakeCase = PythonGeneratorUtils.normalizeToPythonCase(generationContext.getArtifactId());
        String fileName = replace("artifactIdSnakeCase", baseOutputFile, artifactIdSnakeCase);
        vc.put(VelocityProperty.ARTIFACT_ID_SNAKE_CASE, artifactIdSnakeCase);
        
        generationContext.setOutputFile(fileName);
        generateFile(generationContext, vc);
    }

    /**
     * Decorates the provided list of {@link Step}s, which are expected to be related to inference,
     * with the appropriate functionality needed to support language or framework specific generation needs.
     *
     * @param inferenceSteps all steps from the targeted pipeline that are related to inference.
     * @return provided inference steps that have been appropriately decorated to support
     * language or framework specific generation needs.
     */
    abstract protected List<? extends Step> decorateInferenceSteps(List<Step> inferenceSteps);

    /**
     * Sets the base file location on which generated files will be placed to "src/main".
     *
     * @param generationContext
     * @return
     */
    @Override
    protected File getBaseFile(GenerationContext generationContext) {
        return generationContext.getMainSourceDirectory();
    }
}

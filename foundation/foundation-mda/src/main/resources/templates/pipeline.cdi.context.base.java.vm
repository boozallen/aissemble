package ${basePackage}.cdi;

import java.util.ArrayList;
import java.util.List;

import javax.enterprise.inject.spi.Extension;

#foreach ($step in $pipeline.steps)
import ${basePackage}.${step.capitalizedName};
#end
#foreach ($store in $pipeline.fileStores)
import ${basePackage}.filestore.${store.fullName};
#end
import com.boozallen.aissemble.core.cdi.CdiContext;

#if ($pipeline.isAlertingSupportNeeded())
import com.boozallen.aissemble.alerting.core.consumer.AlertLogger;
import com.boozallen.aissemble.alerting.core.AlertProducer;
#end

import io.smallrye.config.inject.ConfigExtension;
import io.smallrye.reactive.messaging.providers.extension.ReactiveMessagingExtension;
import com.boozallen.aiops.data.delivery.messaging.PipelineMessagingConfig;

import io.smallrye.reactive.messaging.providers.extension.ChannelProducer;
import io.smallrye.reactive.messaging.providers.connectors.ExecutionHolder;
import io.smallrye.reactive.messaging.providers.extension.HealthCenter;
import io.smallrye.reactive.messaging.providers.impl.InternalChannelRegistry;
import io.smallrye.reactive.messaging.providers.MediatorFactory;
import io.smallrye.reactive.messaging.providers.extension.MediatorManager;
import io.smallrye.reactive.messaging.providers.wiring.Wiring;
import io.smallrye.reactive.messaging.providers.connectors.WorkerPoolRegistry;
import io.smallrye.reactive.messaging.providers.impl.ConfiguredChannelFactory;
import io.smallrye.reactive.messaging.providers.impl.ConnectorFactories;

/**
 * Configures the CDI context for this application.
 *
 * GENERATED CODE - DO NOT MODIFY (add your customizations in PipelinesCdiContext).
 *
 * Generated from: ${templateName} 
 */
public abstract class PipelinesCdiContextBase implements CdiContext {

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Class<?>> getCdiClasses() {
        List<Class<?>> customBeans = new ArrayList<>();

#foreach ($step in $pipeline.steps)
        customBeans.add(${step.capitalizedName}.class);
#end
#foreach ($store in $pipeline.fileStores)
        customBeans.add(${store.fullName}.class);
#end

        #if ($pipeline.isAlertingSupportNeeded())
        customBeans.add(AlertLogger.class);
        customBeans.add(AlertProducer.class);
        #end

        customBeans.add(ChannelProducer.class);
        customBeans.add(ExecutionHolder.class);
        customBeans.add(HealthCenter.class);
        customBeans.add(InternalChannelRegistry.class);
        customBeans.add(MediatorFactory.class);
        customBeans.add(MediatorManager.class);
        customBeans.add(Wiring.class);
        customBeans.add(WorkerPoolRegistry.class);
        customBeans.add(ConfiguredChannelFactory.class);
        customBeans.add(ConnectorFactories.class);

        return customBeans;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Extension> getExtensions() {
        List<Extension> extensions = new ArrayList<>();

        // TODO: remove once alerting module aligned with aissemble:
        extensions.add(new ConfigExtension());
        extensions.add(new ReactiveMessagingExtension());
        extensions.add(new PipelineMessagingConfig());

        return extensions;
    }

}

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.boozallen.aissemble</groupId>
        <artifactId>extensions</artifactId>
        <version>1.7.0-SNAPSHOT</version>
    </parent>

    <artifactId>extensions-docker</artifactId>
    <name>aiSSEMBLE::Extensions::Docker</name>
    <packaging>pom</packaging>

    <properties>
        <dockerImageName>boozallen/${project.artifactId}</dockerImageName>
        <target.architecture>amd64</target.architecture>
    </properties>

    <profiles>
        <profile>
            <id>arm64</id>
            <properties>
                <target.architecture>arm64</target.architecture>
            </properties>
            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <artifactId>maven-deploy-plugin</artifactId>
                            <configuration>
                                <skip>true</skip>
                            </configuration>
                        </plugin>
                    </plugins>
                </pluginManagement>
            </build>
        </profile>
        <profile>
            <id>ci</id>
            <properties>
                <dockerImageVersion>${project.version}-${target.architecture}</dockerImageVersion>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>clear-buildkit-cache</id>
                                <phase>clean</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker</executable>
                                    <arguments>
                                        <argument>buildx</argument>
                                        <argument>prune</argument>
                                        <argument>--all</argument>
                                        <argument>--force</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>ensure-docker-dependencies</id>
            <!-- This profile is used to ensure that the docker dependencies are encoded in Maven properly. Because of
            the way docker works, any missing image will just be downloaded from the repository. This changes the repo
            such that the image will be missing from the remote.  To fully test the dependencies, you will also need
            to ensure that all of the `local/*` images are deleted from your docker image cache:
                `docker rmi -f $(docker images -q 'local/boozallen/*')`
            -->
            <properties>
                <docker.baseline.repo.id>local</docker.baseline.repo.id>
            </properties>
        </profile>
    </profiles>

    <modules>
        <module>aissemble-quarkus</module>
        <module>aissemble-airflow</module>
        <module>aissemble-fastapi</module>
        <module>aissemble-hive</module>
        <module>aissemble-jenkins</module>
        <module>aissemble-kafka</module>
        <module>aissemble-metadata</module>
        <module>aissemble-nvidia</module>
        <module>aissemble-policy-decision-point</module>
        <module>aissemble-spark</module>
        <module>aissemble-spark-infrastructure</module>
        <module>aissemble-spark-operator</module>
        <module>aissemble-vault</module>
        <module>aissemble-versioning</module>
        <module>aissemble-mlflow</module>
        <module>aissemble-model-training-api-containers</module>
        <module>aissemble-data-lineage-http-consumer</module>
        <module>aissemble-pipeline-invocation</module>
        <module>aissemble-configuration-store</module>
    </modules>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.boozallen.aissemble</groupId>
                <artifactId>bom-component</artifactId>
                <version>${project.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>com.boozallen.aissemble</groupId>
                <artifactId>bom-instantiation</artifactId>
                <version>${project.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <build>
        <plugins>
            <plugin>
                <groupId>org.technologybrewery.orphedomos</groupId>
                <artifactId>orphedomos-maven-plugin</artifactId>
                <configuration>
                    <buildArgs>
                        <!-- allows arch-specific builds to reference the exact base image, might not be needed once we do multi-arch builds + manifest in Orphedomos -->
                        <VERSION_AISSEMBLE>${dockerImageVersion}</VERSION_AISSEMBLE>
                        <DELTA_HIVE_CONNECTOR_VERSION>${version.delta.hive.connector}</DELTA_HIVE_CONNECTOR_VERSION>
                    </buildArgs>
                    <aliases>
                        <!-- Allows downstream projects/modules to use the locally built image -->
                        <!-- It may make sense to have Orphedomos build the image with the repo included, which would remove the need for this -->
                        <alias>${docker.baseline.repo.id}/${dockerImageName}:${dockerImageVersion}</alias>
                    </aliases>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
